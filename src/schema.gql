# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Model For Advertisement"""
type Advertisement {
  backgroundColor: String
  body: String
  clicks: Int

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  expiresAt: Date!

  """Unique UUID string"""
  id: ID!
  image: File
  order: Order
  post: Post!
  postId: String!
  startsAt: Date!
  status: AdvertisementStatus
  targetAgeLowerLimit: Int!
  targetAgeUpperLimit: Int!
  targetSex: AdvertisementTargetSex
  targetTags: [Tag!]
  title: String
  type: AdvertisementType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  views: Int
}

enum AdvertisementStatus {
  blocked
  draft
  expired
  paused
  published
}

enum AdvertisementTargetSex {
  both
  female
  male
}

enum AdvertisementType {
  banner
  feeds
  post
  splash
}

"""Major Category for Post"""
type Answer {
  answer: MCQAnswer!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  question: LoksewaQuestion!
  questionId: String!
  status: AnswerStatus!
  test: LoksewaTest!
  testId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

enum AnswerStatus {
  correct
  unanswered
  wrong
}

"""Major Category for Post"""
type Category {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  name: String!
  parentType: PostType!
  post: [Post!]!
  posts: [Post!]!
  subCategories: [SubCategory!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type Comment {
  body: String!
  children: [Comment!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  parent: Comment
  parentId: String
  post: Post
  postId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
  userId: String!
}

type CommentConnection {
  edges: [CommentEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CreateCategoryInput {
  name: String!
  parentType: PostType!
}

input CreateCommentInput {
  body: String!
  parentId: String
  postId: String!
  userId: String!
}

input CreateLoksewaMockCategoryInput {
  negativeMarkingRatio: Int = 0
  title: String!
  titleNP: String
  totalMins: Int = 90
}

input CreateLoksewaMockSetInput {
  """Category for Mock"""
  categoryId: String
  editorId: String
  status: MockSetStatus!
  type: MockSetType!
}

input CreateLoksewaQuestionCategoryInput {
  title: String!
  titleNP: String
}

input CreateLoksewaQuestionInput {
  additionalDetails: String
  answer: MCQAnswer!
  categoryId: String
  difficulty: Difficulty = medium
  edgeId: String
  metaId: String
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  title: String!
}

input CreatePostInput {
  body: String
  categoryId: String
  imageId: String
  language: Language = en
  slug: String
  status: PostStatus = unverified
  subCategoryId: String
  tags: [String]
  title: String!
  type: PostType = articles
  url: String
  userId: String
}

input CreateReactionInput {
  postId: String!
  type: ReactionType
}

input CreateSetQuestionInput {
  additionalDetails: String
  answer: MCQAnswer!
  categoryId: String
  difficulty: Difficulty = medium
  metaId: String
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  order: Int
  setId: String!
  title: String!
  weight: Int!
}

input CreateSubCategoryInput {
  name: String!
  parentId: String!
}

input CreateTagInput {
  advertisementId: String
  name: String!
}

input CreateUserInput {
  displayName: String
  email: String!
  firstName: String
  image: String
  lastName: String
  middleName: String
  role: String = "user"
  status: String = "active"
}

"""Date custom scalar type"""
scalar Date

enum Difficulty {
  easy
  hard
  medium
  veryEasy
  veryHard
}

type File {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  height: Int!

  """Unique UUID string"""
  id: ID!
  name: String!
  post: Post
  preview: String!
  size: Int!
  source: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
  width: Int!
}

type Flag {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  message: String!
  moderator: User!
  moderatorId: String!
  post: Post!
  postId: String!
  status: FlagStatus!
  type: FlagType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

enum FlagStatus {
  inreview
  solved
  submitted
}

enum FlagType {
  fakenews
  other
  outdated
  politicalcontent
  religiouscontent
  sexualcontent
  slander
}

type Follow {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  following: User!
  followingId: String!

  """Unique UUID string"""
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

type Hotshot {
  backgroundColor: String!
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  image: File
  post: Post
  postId: String!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

enum Language {
  en
  np
}

type LoksewaMockCategory {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  negativeMarkingRatio: Int
  questionSets: [LoksewaMockSet]
  title: String
  titleNP: String
  totalMins: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type LoksewaMockSet {
  category: LoksewaMockCategory
  categoryId: String

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  editor: User
  editorId: String

  """Unique UUID string"""
  id: ID!
  loksewaTest: [LoksewaTest!]!
  orders: [Order!]!
  questions: [MockQuestionEdge!]!
  status: MockSetStatus!
  type: MockSetType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type LoksewaQuestion {
  additionalDetails: String!
  answer: MCQAnswer!
  category: LoksewaQuestionCategory!
  categoryId: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  difficulty: Difficulty!
  edge: MockQuestionEdge!
  edgeId: String!
  getMockCategoryFromSet: LoksewaMockCategory!

  """Unique UUID string"""
  id: ID!
  meta: LoksewaQuestionMeta!
  metaId: String!
  optionA: String!
  optionB: String!
  optionC: String!
  optionD: String!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userAnswer: [Answer!]!
}

type LoksewaQuestionCategory {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  questions: [LoksewaQuestion!]!
  title: String
  titleNP: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type LoksewaQuestionConnection {
  edges: [LoksewaQuestionEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type LoksewaQuestionEdge {
  cursor: String!
  node: LoksewaQuestion!
}

type LoksewaQuestionMeta {
  LoksewaQuestion: [LoksewaQuestion!]!
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type LoksewaTest {
  answers: [Answer!]!
  completed: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  score: Int!
  set: LoksewaMockSet!
  setId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

enum MCQAnswer {
  A
  B
  C
  D
}

type MagicLink {
  listener: String!
  status: Boolean!
}

type Membership {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  expiresAt: Date!

  """Unique UUID string"""
  id: ID!
  order: Order!
  type: MembershipType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

enum MembershipType {
  bronze
  gold
  silver
}

type MockQuestionEdge {
  LoksewaMockSet: LoksewaMockSet!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  order: Int!
  question: LoksewaQuestion!
  questionId: String!
  setId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  weight: Int!
}

enum MockSetStatus {
  draft
  hidden
  published
}

enum MockSetType {
  free
  official
  premium
  trial
}

type Mutation {
  createAsset(file: Upload!): File!
  createAssetOnServer(file: Upload!): Boolean!
  createCategory(category: CreateCategoryInput!): Category!
  createLoksewaCategory(category: CreateLoksewaQuestionCategoryInput!): LoksewaQuestionCategory!
  createLoksewaMockCategory(category: CreateLoksewaMockCategoryInput!): LoksewaMockCategory!
  createMeComment(comment: CreateCommentInput!): Comment!
  createMePost(post: CreatePostInput!): Post!
  createMockSet(set: CreateLoksewaMockSetInput!): LoksewaMockSet!
  createPost(post: CreatePostInput!): Post!
  createQuestion(question: CreateLoksewaQuestionInput!): LoksewaQuestion!
  createSetQuestion(question: CreateSetQuestionInput!): MockQuestionEdge!
  createSubCategory(subCategory: CreateSubCategoryInput!): Category!
  createTag(tag: CreateTagInput!): Category!
  createUser(user: CreateUserInput!): User!
  deleteCategory(category: UpdateCategoryInput!): Boolean!
  deleteLoksewaCategory(category: UpdateLoksewaQuestionCategoryInput!): Boolean!
  deleteLoksewaMockCategory(category: UpdateLoksewaMockCategoryInput!): Boolean!
  deleteMeComment(comment: UpdateCommentInput!): Boolean!
  deleteMockSet(set: UpdateLoksewaMockSetInput!): Boolean!
  deleteSubCategory(subCategory: UpdateSubCategoryInput!): Boolean!
  increaseView(postId: String!): Boolean!
  reactToPost(reaction: CreateReactionInput!): Boolean!
  sendMagicLink(email: String!): MagicLink!
  updateCategory(category: UpdateCategoryInput!): Category!
  updateLoksewaCategory(category: UpdateLoksewaQuestionCategoryInput!): LoksewaQuestionCategory!
  updateLoksewaMockCategory(category: UpdateLoksewaMockCategoryInput!): LoksewaMockCategory!
  updateMeComment(comment: UpdateCommentInput!): Comment!
  updateMeNotification(notificationId: String!): Boolean!
  updateMePost(post: UpdatePostInput!): Post!
  updateMockSet(set: UpdateLoksewaMockSetInput!): LoksewaMockSet!
  updatePost(post: UpdatePostInput!): Post!
  updateQuestion(question: UpdateLoksewaQuestionInput!): LoksewaQuestion!
  updateSetQuestion(question: UpdateSetQuestionInput!): MockQuestionEdge!
  updateSubCategory(subCategory: UpdateSubCategoryInput!): Category!
}

type Notification {
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  post: Post!
  postId: String!
  read: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  url: String
  user: User!
  userId: String!
}

type Order {
  advertisementId: String!
  advertsiment: Advertisement
  amountPaid: Int!
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  membership: Membership
  membershipId: String!
  paymentId: String!
  paymentMethod: PaymentMethod!
  set: LoksewaMockSet
  setId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum PaymentMethod {
  banktransfer
  cash
  esewa
  imepay
  ipsconnect
  phonepay
  visa
}

"""Post model"""
type Post {
  advertisement: Advertisement
  body: String
  category: Category
  categoryId: String
  comments: [Comment!]!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  deleted: Boolean!
  editor: User
  editorId: String
  flag: [Flag]
  hotShot: Hotshot

  """Unique UUID string"""
  id: ID!
  image: File
  language: Language!
  publishedAt: Date
  reactions: [Reaction!]
  scholarship: Scholarship
  slug: String!
  status: PostStatus!
  subCategory: SubCategory
  subCategoryId: String
  tags: [Tag!]!
  title: String!
  type: PostType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  url: String
  user: User
  userId: String
  views: Int!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

enum PostStatus {
  blocked
  commented
  draft
  hidden
  published
  unverified
  verified
}

enum PostType {
  articles
  information
  loksewa
  scholarships
}

type Query {
  getCategories: [Category!]!
  getCategory(id: String!): Category!
  getComments(after: String, before: String, first: Int, last: Int, postId: String!, skip: Int): CommentConnection!
  getLoksewaCategories: [LoksewaQuestionCategory!]!
  getLoksewaMockCategories: [LoksewaMockCategory!]!
  getMeNotification: [Notification!]!
  getMeReaction(postId: String!): Reaction
  getMockCategory(categoryId: String!): LoksewaMockCategory!
  getMockSet(setId: String!): LoksewaMockSet!
  getMockSets(categoryId: String!): [LoksewaMockSet!]!
  getPost(id: String!): Post
  getPosts(after: String, before: String, categoryId: String, contains: String, editorId: String, first: Int, last: Int, skip: Int, status: PostStatus, subCategoryId: String, type: PostType, userId: String): PostConnection!
  getQuestions(after: String, before: String, categoryId: String, first: Int, last: Int, skip: Int): LoksewaQuestionConnection!
  getTag(id: String!): Category!
  getTags(after: String, before: String, contains: String, first: Int, last: Int, skip: Int): TagConnection!
  getUsers(after: String, before: String, contains: String, first: Int, last: Int, roles: [UserRole], skip: Int): UserConnection!
  me: User
}

"""Major Category for Post"""
type Reaction {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  post: Post!
  postId: String!
  type: ReactionType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

enum ReactionType {
  angry
  dislike
  happy
  like
  sad
}

type Scholarship {
  country: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  deadlineAt: Date!

  """Unique UUID string"""
  id: ID!
  level: ScholarshipLevel!
  post: Post!
  postId: String!
  startsAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

enum ScholarshipLevel {
  bachelors
  k12
  language
  masters
  phd
  postgrad
  research
  training
}

type Session {
  authToken: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  expires: Date!
  facebookToken: String
  githubToken: String
  googleToken: String

  """Unique UUID string"""
  id: ID!
  invalidate: Boolean!
  refreshToken: String!
  token: String!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
}

"""Sub Category for Post"""
type SubCategory {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  name: String!
  parent: Category
  parentId: String
  posts: [Post!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type Subscription {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: Boolean!

  """Unique UUID string"""
  id: ID!
  postType: [PostType!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: String!
}

type Tag {
  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Unique UUID string"""
  id: ID!
  name: String!
  post: [Post!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type TagConnection {
  edges: [TagEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TagEdge {
  cursor: String!
  node: Tag!
}

input UpdateCategoryInput {
  id: String!
  name: String
  parentType: PostType
}

input UpdateCommentInput {
  body: String
  id: String!
  parentId: String
  postId: String
  userId: String
}

input UpdateLoksewaMockCategoryInput {
  id: String!
  negativeMarkingRatio: Int = 0
  title: String
  titleNP: String
  totalMins: Int = 90
}

input UpdateLoksewaMockSetInput {
  """Category for Mock"""
  categoryId: String
  editorId: String
  id: String!
  status: MockSetStatus!
  type: MockSetType!
}

input UpdateLoksewaQuestionCategoryInput {
  id: String!
  title: String
  titleNP: String
}

input UpdateLoksewaQuestionInput {
  additionalDetails: String
  answer: MCQAnswer!
  categoryId: String
  difficulty: Difficulty = medium
  edgeId: String
  id: String!
  metaId: String
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  title: String!
}

input UpdatePostInput {
  body: String
  categoryId: String
  id: String!
  imageId: String
  language: Language = en
  slug: String
  status: PostStatus = unverified
  subCategoryId: String
  tags: [String]
  title: String!
  type: PostType = articles
  url: String
  userId: String
}

input UpdateSetQuestionInput {
  additionalDetails: String
  answer: MCQAnswer!
  categoryId: String
  difficulty: Difficulty = medium
  id: String!
  metaId: String
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  order: Int
  questionId: String!
  setId: String!
  title: String!
  weight: Int!
}

input UpdateSubCategoryInput {
  id: String!
  name: String
  parentId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""User Model"""
type User {
  bio: String
  comments: Comment

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  deleted: Boolean!
  displayName: String
  editedLoksewaMockSet: [LoksewaMockSet!]
  editedPosts: [Post!]
  email: String!
  firstName: String!
  flag: [Flag!]!
  followers: [Follow!]
  following: [Follow!]

  """Unique UUID string"""
  id: ID!
  image: File
  lastName: String
  loksewaTest: [LoksewaTest!]
  membership: Membership
  middleName: String
  moderatorFlag: [Flag!]
  notifications: [Notification!]!
  orders: [Order!]
  posts: [Post!]
  reactions: [Reaction!]
  role: UserRole!
  session: [Session!]!
  status: UserStatus!
  subcription: Subscription

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserRole {
  admin
  moderator
  user
}

enum UserStatus {
  active
  blocked
  inactive
}
